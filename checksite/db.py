"""interface to checksite's PostgreSQL database"""

from __future__ import annotations

import logging
from typing import Dict

import psycopg2
import psycopg2.errors

logger = logging.getLogger(__name__)


class StatusDB:
    schema_version = 1

    def __init__(self, db_url: str):
        self.db_url = db_url
        self.conn = psycopg2.connect(self.db_url)

    def check_schema(self):
        """Safely ensure that the database schema is a good state.

        This should be called every time a new process that needs to use
        the database starts up.
        """
        metadata = self._get_metadata()
        logger.debug('db metadata: %r', metadata)

        version = metadata.get('schema_version')
        if version != str(self.schema_version):
            self._init_schema()

        self.conn.commit()

    def _get_metadata(self) -> Dict[str, str]:
        try:
            with self.conn.cursor() as curs:
                curs.execute('SELECT * from metadata')
                rows = curs.fetchall()
                return {key: value for (key, value) in rows}
        except psycopg2.errors.UndefinedTable:
            self.conn.rollback()
            with self.conn.cursor() as curs:
                curs.execute(
                    'CREATE TABLE metadata (key varchar, value varchar)')
            return {}

    def _init_schema(self):
        with self.conn.cursor() as curs:
            curs.execute(
                '''
                CREATE TABLE events (
                  event_id integer
                    primary key generated by default as identity,
                  ts timestamp not null,
                  url varchar not null,
                  elapsed integer,
                  error varchar,
                  status integer,
                  body_prefix varchar,
                  content_match varchar)
                ''')
            # Since we only have 1 schema version right now, this is very
            # simple. To be more general, it should use INSERT INTO ... ON
            # CONFLICT UPDATE. But if I need a general schema tracking system,
            # I'll just switch to Alembic rather than reinvent it!
            curs.execute(
                'INSERT INTO metadata VALUES (%s, %s)',
                ('schema_version', self.schema_version))
